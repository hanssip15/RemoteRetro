generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum retro_status {
  draft
  ongoing
  completed
}

enum retro_formats {
  happy_sad_confused
  start_stop_continue
}

enum retro_phases {
  submit
  grouping
  labelling
  voting
  final
  ActionItems
}

enum retro_format_types {
  format_1
  format_2
  format_3
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  name      String
  image_url String?

  // Relasi ke Retro (sebagai creator)
  retros    Retro[]        @relation("CreatedRetros")

  // Relasi ke RetroItem (sebagai creator)
  items     RetroItem[]    @relation("CreatedItems")

  // Relasi ke Participant
  participants Participant[]

  @@map("users")
}

model Retro {
  id            String         @id
  title         String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  created_by    String?
  status        retro_status
  format        retro_formats
  current_phase retro_phases?

  // Relasi ke User (creator)
  creator       User?          @relation("CreatedRetros", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Relasi ke RetroItem
  items         RetroItem[]

  // Relasi ke Participant
  participants  Participant[]

  // Relasi ke LabelsGroup
  labelsGroups  LabelsGroup[]

  @@map("retros")
}

model RetroItem {
  id          String         @id @default(uuid())
  content     String
  retro_id    String
  created_by  String?
  format_type retro_format_types
  is_edited   Boolean        @default(false)

  // Relasi ke Retro
  retro       Retro          @relation(fields: [retro_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Relasi ke User
  creator     User?          @relation("CreatedItems", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Relasi ke LabelsGroup
  labels      LabelsGroup[]  @relation("ItemLabels")

  @@map("retro_items")
}

model Participant {
  id        Int       @id @default(autoincrement())
  role      Boolean   @default(false)
  joined_at DateTime  @default(now())
  retro_id  String
  user_id   String

  // Relasi ke Retro
  retro     Retro     @relation(fields: [retro_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Relasi ke User
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([retro_id, user_id], name: "uniquq_retro_user")
  @@map("participants")
}

model LabelsGroup {
  id        Int         @id @default(autoincrement())
  label     String?
  retro_id  String?
  item_id   String?

  // Relasi ke Retro
  retro     Retro?      @relation(fields: [retro_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Relasi ke RetroItem
  item      RetroItem?  @relation("ItemLabels", fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("labels_group")
}
